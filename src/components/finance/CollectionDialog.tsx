import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface CollectionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  collection: {
    id: string;
    order_number: string;
    client_name: string;
    client_email: string;
    estimated_cost: number;
  } | null;
  onSuccess?: () => void;
}

export function CollectionDialog({ open, onOpenChange, collection, onSuccess }: CollectionDialogProps) {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [amount, setAmount] = useState("");
  const [accountType, setAccountType] = useState<"fiscal" | "no_fiscal">("no_fiscal");
  const [paymentMethod, setPaymentMethod] = useState("");
  const [description, setDescription] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!collection || !amount) return;

    setLoading(true);
    try {
      const finalAmount = Number(amount);
      const finalDescription = description || `Cobro orden ${collection.order_number} - ${collection.client_name}`;

      const { error } = await supabase
        .from("incomes")
        .insert([{
          amount: finalAmount,
          description: finalDescription,
          category: "cobro",
          account_type: accountType,
          payment_method: paymentMethod || null,
          client_name: collection.client_name,
          income_date: new Date().toISOString().split('T')[0],
          income_number: "" // Will be auto-generated by trigger
        }]);

      if (error) throw error;

      toast({
        title: "Cobro registrado",
        description: `Se registró el ingreso por ${finalAmount.toLocaleString(undefined, { style: 'currency', currency: 'USD' })}`
      });

      onOpenChange(false);
      onSuccess?.();
      
      // Reset form
      setAmount("");
      setDescription("");
      setPaymentMethod("");
      setAccountType("no_fiscal");
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "No se pudo registrar el cobro",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Set default amount when collection changes
  useState(() => {
    if (collection && open) {
      setAmount(collection.estimated_cost.toString());
      setDescription(`Cobro orden ${collection.order_number} - ${collection.client_name}`);
    }
  });

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Generar Cobro</DialogTitle>
          <DialogDescription>
            Registrar el cobro de la orden {collection?.order_number} como ingreso
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="amount">Monto</Label>
            <Input
              id="amount"
              type="number"
              step="0.01"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="0.00"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="accountType">Tipo de Cuenta</Label>
            <Select value={accountType} onValueChange={(value: "fiscal" | "no_fiscal") => setAccountType(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="no_fiscal">No Fiscal</SelectItem>
                <SelectItem value="fiscal">Fiscal</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="paymentMethod">Método de Pago</Label>
            <Select value={paymentMethod} onValueChange={setPaymentMethod}>
              <SelectTrigger>
                <SelectValue placeholder="Seleccionar método" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="efectivo">Efectivo</SelectItem>
                <SelectItem value="transferencia">Transferencia</SelectItem>
                <SelectItem value="tarjeta">Tarjeta</SelectItem>
                <SelectItem value="cheque">Cheque</SelectItem>
                <SelectItem value="deposito">Depósito</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Descripción</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Descripción del cobro"
              rows={3}
            />
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancelar
            </Button>
            <Button type="submit" disabled={loading || !amount}>
              {loading ? "Registrando..." : "Registrar Cobro"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}