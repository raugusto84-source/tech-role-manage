import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface ClientRewards {
  totalCashback: number;
  referralCode: string;
  isNewClient: boolean;
}

export function useClientRewards(userProfile: any) {
  const [rewards, setRewards] = useState<ClientRewards>({
    totalCashback: 0,
    referralCode: "",
    isNewClient: true
  });
  const [loading, setLoading] = useState(true);

  // Function to ensure all clients have rewards initialized
  const initializeClientRewards = async () => {
    try {
      // Use a simpler approach - get all clients and all client_rewards separately
      const { data: allClients } = await supabase
        .from('clients')
        .select('id');

      const { data: existingRewards } = await supabase
        .from('client_rewards')
        .select('client_id');

      // Find clients without rewards
      const existingRewardClientIds = new Set(existingRewards?.map(r => r.client_id) || []);
      const clientsWithoutRewards = allClients?.filter(
        client => !existingRewardClientIds.has(client.id)
      );

      // Create rewards records for clients that don't have them
      if (clientsWithoutRewards && clientsWithoutRewards.length > 0) {
        const rewardsToInsert = clientsWithoutRewards.map(client => ({
          client_id: client.id,
          total_cashback: 0,
          is_new_client: true,
          new_client_discount_used: false
        }));

        const { error } = await supabase
          .from('client_rewards')
          .insert(rewardsToInsert);

        if (!error) {
          console.log(`Initialized rewards for ${clientsWithoutRewards.length} clients`);
        } else {
          console.error('Error inserting rewards:', error);
        }
      }
    } catch (error) {
      console.error('Error initializing client rewards:', error);
    }
  };

  const loadRewards = async () => {
    if (!userProfile?.email) {
      setRewards({ totalCashback: 0, referralCode: "", isNewClient: true });
      return;
    }

    try {
      // First, try to find or create the client record
      let { data: client } = await supabase
        .from('clients')
        .select('id, user_id')
        .eq('email', userProfile.email)
        .maybeSingle();
      
      // If no client found by email, try by user_id
      if (!client && userProfile.user_id) {
        const { data: clientByUserId } = await supabase
          .from('clients')
          .select('id, user_id')
          .eq('user_id', userProfile.user_id)
          .maybeSingle();
        
        if (clientByUserId) {
          client = clientByUserId;
        }
      }

      // If still no client, create one
      if (!client) {
        const { data: newClient, error: createClientError } = await supabase
          .from('clients')
          .insert({
            name: userProfile.full_name || 'Cliente',
            email: userProfile.email,
            user_id: userProfile.user_id,
            address: 'DirecciÃ³n no especificada',
            client_number: '', // Will be auto-generated by trigger
            created_by: userProfile.user_id
          })
          .select('id, user_id')
          .single();

        if (createClientError) {
          console.error('Error creating client:', createClientError);
          setRewards({ totalCashback: 0, referralCode: "", isNewClient: true });
          return;
        }
        client = newClient;
      }

      // Ensure client has rewards record
      let { data: rewardsData } = await supabase
        .from('client_rewards')
        .select('*')
        .eq('client_id', client.id)
        .maybeSingle();

      // If no rewards record exists, create one
      if (!rewardsData) {
        const { data: newRewardsData, error: createError } = await supabase
          .from('client_rewards')
          .insert({
            client_id: client.id,
            total_cashback: 0,
            is_new_client: true,
            new_client_discount_used: false
          })
          .select()
          .single();

        if (!createError) {
          rewardsData = newRewardsData;
        } else {
          console.error('Error creating rewards record:', createError);
        }
      }

      // Get referral code if exists
      const { data: referralData } = await supabase
        .from('client_referrals')
        .select('referral_code')
        .eq('referrer_client_id', client.id)
        .maybeSingle();

      // Get actual cashback total from reward transactions
      const { data: cashbackTransactions } = await supabase
        .from('reward_transactions')
        .select('amount')
        .eq('client_id', client.id)
        .eq('transaction_type', 'earned');

      const actualCashback = cashbackTransactions?.reduce((total, t) => total + (t.amount || 0), 0) || 0;
      
      console.log('Cashback calculation:', { 
        clientId: client.id, 
        email: userProfile.email,
        transactions: cashbackTransactions, 
        actualCashback 
      });

      // Update rewards record if cashback amount is different
      if (rewardsData && rewardsData.total_cashback !== actualCashback) {
        await supabase
          .from('client_rewards')
          .update({ total_cashback: actualCashback })
          .eq('client_id', client.id);
      }

      setRewards({
        totalCashback: actualCashback,
        referralCode: referralData?.referral_code || "",
        isNewClient: rewardsData?.is_new_client || true
      });
    } catch (error) {
      console.error('Error loading rewards:', error);
      setRewards({ totalCashback: 0, referralCode: "", isNewClient: true });
    }
  };

  useEffect(() => {
    const initialize = async () => {
      setLoading(true);
      await initializeClientRewards();
      await loadRewards();
      setLoading(false);
    };

    if (userProfile?.email) {
      initialize();
    }
  }, [userProfile?.email, userProfile?.user_id]);

  // Set up real-time updates for reward transactions
  useEffect(() => {
    if (!userProfile?.email) return;

    const channel = supabase
      .channel('reward-transactions-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'reward_transactions'
        },
        () => {
          console.log('Reward transaction changed, reloading rewards...');
          loadRewards();
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [userProfile?.email]);

  return {
    rewards,
    loading,
    reloadRewards: loadRewards
  };
}