import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

export interface Client {
  id: string;
  name: string;
  email: string | null;
  phone: string | null;
  address: string;
}

export interface Problem {
  id: string;
  name: string;
  is_active: boolean;
}

export interface Solution {
  id: string;
  name: string;
  base_price: number | null;
  description: string | null;
  service_category: string;
  is_active: boolean;
  vat_rate: number | null;
}

export interface DiagnosticQuestion {
  id: string;
  question_text: string;
  problem_id: string | null;
}

interface OrderFormData {
  client: Client | null;
  problem: Problem | null;
  solution: Solution | null;
  diagnosticAnswers: Record<string, boolean>;
  notes: string;
  customPrice: number | null;
}

export const useOrderMinimal = () => {
  const [step, setStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<OrderFormData>({
    client: null,
    problem: null,
    solution: null,
    diagnosticAnswers: {},
    notes: '',
    customPrice: null,
  });

  const [clients, setClients] = useState<Client[]>([]);
  const [problems, setProblems] = useState<Problem[]>([]);
  const [solutions, setSolutions] = useState<Solution[]>([]);
  const [diagnosticQuestions, setDiagnosticQuestions] = useState<DiagnosticQuestion[]>([]);

  // Load clients
  const loadClients = async () => {
    const { data, error } = await supabase
      .from('clients')
      .select('id, name, email, phone, address')
      .order('name');
    
    if (!error && data) {
      setClients(data);
    }
  };

  // Load problems
  const loadProblems = async () => {
    const { data, error } = await supabase
      .from('problems')
      .select('id, name, is_active')
      .eq('is_active', true)
      .order('name');
    
    if (!error && data) {
      setProblems(data);
    }
  };

  // Load solutions (service_types)
  const loadSolutions = async () => {
    const { data, error } = await supabase
      .from('service_types')
      .select('id, name, base_price, description, service_category, is_active, vat_rate')
      .eq('is_active', true)
      .order('name');
    
    if (!error && data) {
      setSolutions(data);
    }
  };

  // Load diagnostic questions for a problem
  const loadDiagnosticQuestions = async (problemId: string) => {
    const { data, error } = await supabase
      .from('diagnostic_questions')
      .select('id, question_text, problem_id')
      .eq('problem_id', problemId)
      .eq('is_active', true)
      .order('question_order');
    
    if (!error && data) {
      setDiagnosticQuestions(data);
    }
  };

  // Create new client
  const createClient = async (clientData: { name: string; email?: string; phone?: string; address: string }) => {
    setIsLoading(true);
    
    const { data, error } = await supabase
      .from('clients')
      .insert([{
        name: clientData.name,
        email: clientData.email || null,
        phone: clientData.phone || null,
        address: clientData.address,
        client_number: '' // This will be auto-generated by trigger
      }])
      .select()
      .single();

    setIsLoading(false);

    if (error) {
      toast({ title: "Error", description: "No se pudo crear el cliente", variant: "destructive" });
      return null;
    }

    await loadClients();
    return data;
  };

  // Generate order number
  const generateOrderNumber = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const timestamp = Date.now().toString().slice(-4);
    return `ORD-${year}${month}-${timestamp}`;
  };

  // Create order
  const createOrder = async () => {
    if (!formData.client || !formData.problem || !formData.solution) {
      toast({ title: "Error", description: "Faltan datos requeridos", variant: "destructive" });
      return null;
    }

    setIsLoading(true);

    const orderNumber = generateOrderNumber();
    const basePrice = formData.customPrice || formData.solution.base_price || 0;
    const vatRate = formData.solution.vat_rate || 0;
    const vatAmount = (basePrice * vatRate) / 100;
    const total = basePrice + vatAmount;

    try {
      // Create order
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert([{
          order_number: orderNumber,
          client_id: formData.client.id,
          service_type: formData.solution.service_category,
          failure_description: formData.problem.name,
          delivery_date: new Date().toISOString().split('T')[0],
          estimated_cost: total,
          status: 'pendiente_aprobacion' as const
        }])
        .select()
        .single();

      if (orderError) throw orderError;

      // Create order item
      const { error: itemError } = await supabase
        .from('order_items')
        .insert([{
          order_id: order.id,
          service_type_id: formData.solution.id,
          service_name: formData.solution.name,
          service_description: formData.solution.description,
          quantity: 1,
          unit_cost_price: basePrice,
          unit_base_price: basePrice,
          subtotal: basePrice,
          vat_rate: vatRate,
          vat_amount: vatAmount,
          total_amount: total,
          item_type: 'servicio'
        }]);

      if (itemError) throw itemError;

      // Save diagnostic answers if any
      if (Object.keys(formData.diagnosticAnswers).length > 0) {
        const diagnosticData = diagnosticQuestions
          .filter(q => formData.diagnosticAnswers[q.id] !== undefined)
          .map(q => ({
            order_id: order.id,
            question: q.question_text,
            answer: formData.diagnosticAnswers[q.id] ? 'Sí' : 'No'
          }));

        if (diagnosticData.length > 0) {
          await supabase.from('order_diagnostics').insert(diagnosticData);
        }
      }

      toast({ 
        title: "¡Orden creada!", 
        description: `Orden ${orderNumber} creada exitosamente` 
      });

      setIsLoading(false);
      return order;

    } catch (error: any) {
      setIsLoading(false);
      toast({ 
        title: "Error", 
        description: error.message || "No se pudo crear la orden", 
        variant: "destructive" 
      });
      return null;
    }
  };

  // Navigation helpers
  const goToStep = (newStep: number) => {
    setStep(newStep);
  };

  const nextStep = () => {
    if (step < 3) setStep(step + 1);
  };

  const prevStep = () => {
    if (step > 1) setStep(step - 1);
  };

  // Update form data
  const updateFormData = (updates: Partial<OrderFormData>) => {
    setFormData(prev => ({ ...prev, ...updates }));
  };

  const selectClient = (client: Client) => {
    updateFormData({ client });
    nextStep();
  };

  const selectProblem = (problem: Problem) => {
    updateFormData({ problem, solution: null, diagnosticAnswers: {} });
    loadDiagnosticQuestions(problem.id);
    
    // Auto-select first matching solution
    const matchingSolution = solutions.find(s => 
      s.service_category.toLowerCase().includes(problem.name.toLowerCase()) ||
      s.name.toLowerCase().includes(problem.name.toLowerCase())
    );
    
    if (matchingSolution) {
      updateFormData({ problem, solution: matchingSolution });
    }
  };

  const selectSolution = (solution: Solution) => {
    updateFormData({ solution });
  };

  // Calculate totals
  const calculateTotal = () => {
    if (!formData.solution) return 0;
    
    const basePrice = formData.customPrice || formData.solution.base_price || 0;
    const vatRate = formData.solution.vat_rate || 0;
    const vatAmount = (basePrice * vatRate) / 100;
    
    return basePrice + vatAmount;
  };

  // Initialize data
  useEffect(() => {
    loadClients();
    loadProblems();
    loadSolutions();
  }, []);

  return {
    step,
    formData,
    clients,
    problems,
    solutions,
    diagnosticQuestions,
    isLoading,
    goToStep,
    nextStep,
    prevStep,
    updateFormData,
    selectClient,
    selectProblem,
    selectSolution,
    createClient,
    createOrder,
    calculateTotal,
    loadClients
  };
};